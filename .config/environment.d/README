https://www.freedesktop.org/software/systemd/man/environment.d.html

https://in.waw.pl/~zbyszek/blog/environmentd.html

Traditionally, Linux has not had a uniformly supported mechanism to define the environment. There are at least two widely used mechanisms. The most straightforward approach is the shell profile configuration. Shells usually execute any scripts in /etc/profile.d/ and load /etc/environment. An obvious shortcoming is that this mechanism requires a shell to be used. Before systemd this wasn't that much of a problem, because shell was omnipresent and the invocation of most programs went through a shell at some point. In particular, graphical sessions invoked a bunch of shell scripts in /etc/X11/xinit/xinitrc.d/, so starting one more shell to load the user environment wasn't an issue. With systemd things are moving towards a shell-free environment, and Wayland sessions could do without a shell at all. In fact this was the case with gnome-wayland, until the need to load the environment forced the gnome developers to undo that (gnome bug 736660). [...] In the new scheme of things, systemd (the system instance), starts user@.service for the user, and the systemd running in user@.service directly forks various processes. Systemd is already in the business of defining the environment for child processes, and the systemd --user instance is pretty much the only place where we can add environment variables. It has to be done by the manager itself, because we want all processes to inherit the same environment.
