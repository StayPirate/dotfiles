alias decompress='extract_phar_inplace() {
                      secbox --no-tty php -r \
                      "\$phar = new Phar(\"$1\"); \$phar->extractTo(\"$(dirname "$1")\");"
                  }

                  old_IFS=$IFS; IFS=''

                  # Extract data.tar.gz from gemfile which will be processed later on this script 
                  find . -type f -regextype posix-extended -regex ".*\.gem" |
                    awk -F ": " "/^[^#]/{print $1}" |
                    grep -v "\.osc" |
                      while read -r gemfile; do
                        echo $gemfile
                        tar --force-local -xf "$gemfile" -C $(dirname "$gemfile");
                      done

                  # Extract PHP Archive (.phar files)
                  find . -type f -regextype posix-extended -regex ".*\.phar" |
                    awk -F ": " "/^[^#]/{print $1}" |
                    grep -v "\.osc" |
                    while read -r pharfile; do
                      echo $pharfile
                      extract_phar_inplace "$pharfile"
                    done

                  # Extract obscpio archives (.obscpio files)
                  find . -type f -regextype posix-extended -regex ".*\.obscpio" |
                    awk -F ": " "/^[^#]/{print $1}" |
                    grep -v "\.osc" |
                    while read -r obsfile; do
                      echo $obsfile
                      cpio --quiet --extract --preserve-modification-time --make-directories --directory $(dirname "$obsfile") -- < "$obsfile"
                    done

                  # Extract any compressed archive in its same folder
                  find . -type f -regextype posix-extended -regex ".*\.(tar\.|tgz|zip|whl).*" |
                    awk -F ": " "/^[^#]/{print $1}" |
                    # Skip .osc folder
                    grep -v "\.osc" |
                    # Skip similar-name non archive files
                    grep -Ev ".*\.(asc|sig|sha)$" |
                      while read -r line; do
                        echo $line
                        if echo $line | grep -qE ".*\.(zip|whl)$"; then
                          unzip -q "$line" -d $(dirname "$line");
                        else
                          tar --force-local -xf "$line" -C $(dirname "$line");
                        fi
                      done

                  IFS=$old_IFS
                  unset gemfile line old_IFS'

# Enter the SUSE kernel repository
alias k="cd ~/.local/share/SUSE/kernel"
# Enter the SUSE kernel repository and update all the local branches
alias kk="cd ~/.local/share/SUSE/kernel && git reset-to-remote --all-local-branches"

export SUSE_CHANNELS=~/.local/share/SUSE/SUSE:Channels

# Enter the SUSE Channels local copy
alias sc='cd $SUSE_CHANNELS'
# Enter the SUSE Channels local copy and update
alias scc='cd $SUSE_CHANNELS && \
  zsh -ic "isc up $SUSE_CHANNELS > /dev/null && \
  echo -e \"${SUSE_CHANNELS##*/}\tUpdated\""'

alias sepkg='f() {
# Search packages that build binaries that contains the searched substring (case-insensitive)
# Xidel upstream: http://videlibri.sourceforge.net/xidel.html
#
# Example:
#   > sepkg webkit
#   libproxy-plugins
#   libqt4
#   libqt5-qtwebkit
#   libQtWebKit4
#   webkit2gtk3
#   webkit2gtk3:gtk3
#   webkit2gtk3:gtk3-soup2
#   webkit2gtk3:gtk4
#   webkitgtk
#   webkitgtk3

  local _different_folder=false
  [ "$PWD" != "$SUSE_CHANNELS" ] && { _different_folder="$PWD"; cd $SUSE_CHANNELS }
    xidel -s --xpath \
      "//binary[matches(@name,\"${1}\",\"i\") or matches(@package,\"${1}\",\"i\")]/@package" \
      */_channel 2>/dev/null | sort -u
  [ "$_different_folder" != false ] && cd $_different_folder
}; f'

alias sebin='f() {
# Like sepkg (above), but it also prints the name of the binary that matched the searched substring and the
# codestream where it is submitted. This could be useful to quickly checkout interesting packages
#
# Example:
#   > sebin webkit
#   SUSE:SLE-11-SP1:Update libqt4 libQtWebKit4
#   SUSE:SLE-11-SP1:Update libqt4 libQtWebKit4-32bit
#   SUSE:SLE-11-SP3:Update libqt4 libQtWebKit4
#   SUSE:SLE-11-SP3:Update libqt4 libQtWebKit4-32bit
#   SUSE:SLE-12-SP2:Update libproxy-plugins libproxy1-pacrunner-webkit
#   SUSE:SLE-12-SP2:Update libqt5-qtwebkit libQt5WebKit5
#   [...]

  local _different_folder=false
  [ "$PWD" != "$SUSE_CHANNELS" ] && { _different_folder="$PWD"; cd $SUSE_CHANNELS }
  xidel -s --xpath \
        "//binary[matches(@name,\"${1}\",\"i\") or matches(@package,\"${1}\",\"i\")]/concat(parent::binaries/@project, \" \",@package,\" \",@name)" \
        */_channel 2>/dev/null | sort -u | column -t -N Codestream,Package,Binary
  [ "$_different_folder" != false ] && cd $_different_folder
}; f'

# Handy global alias to "check-out all (COALL)" the packages from the sebin (above) output
#
# Example:
#   > sebin ruby-dbus COALL
#   SUSE:SLE-11-SP1:Update ruby-dbus
#   SUSE:SLE-12:Update rubygem-ruby-dbus
#   SUSE:SLE-15:Update rubygem-ruby-dbus
#   --- START TO CHECKOUT PACKAGES ---
#   SUSE:SLE-11-SP1:Update ruby-dbus                checked-out
#   SUSE:SLE-12:Update rubygem-ruby-dbus            checked-out
#   SUSE:SLE-15:Update rubygem-ruby-dbus            checked-out
#
alias -g COALL='| while read -r codestream package binary; do \
                    echo "${codestream} ${package}"; done | \
                    sort -u | \
                    sed "\${s/$/\n--- START TO CHECKOUT PACKAGES ---/}" | \
                    tee /dev/fd/2 | \
                    sed "$ d" | \
                    xargs -I % zsh -ic "echo -n % &&
                      isc co % >/dev/null 2>&1 &&
                      echo -e \"\t\tchecked-out\" || echo -e \"\t\tNOT checked-out\""
'

alias maintained_regular='f() {
# List regular maintained codestreams of specified package

  local _different_folder=false
  [ "$PWD" != "$SUSE_CHANNELS" ] && { _different_folder="$PWD"; cd $SUSE_CHANNELS }
  xidel -s --xpath \
    "//channel[not(exists(disabled)) and descendant::target[not(exists(disabled))]]//binary[(@name=\"${1}\")]/parent::binaries/@project" \
    */_channel | sort -u
  [ "$_different_folder" != false ] && cd $_different_folder
}; f'

alias maintained_ltss='f() {
# List LTSS codestreams of specified package

  local _different_folder=false
  [ "$PWD" != "$SUSE_CHANNELS" ] && { _different_folder="$PWD"; cd $SUSE_CHANNELS }
  xidel -s --xpath \
    "//channel[not(exists(disabled)) and descendant::target[exists(disabled)]]//binary[(@name=\"${1}\")]/parent::binaries/@project" \
    */_channel | sort -u
  [ "$_different_folder" != false ] && cd $_different_folder
}; f'

alias maintained='f() {
# List both regular and LTSS codestreams for a specified package
#
# Example:
#   > maintained libqt4
#   The libqt4 package is supported in the following codestreams:
#   Regular support
#           SUSE:SLE-11-SP1:Update
#           SUSE:SLE-11-SP3:Update
#           SUSE:SLE-12:Update
#   LTSS support
#           SUSE:SLE-11-SP3:Update
#           SUSE:SLE-12:Update

  local _different_folder=false
  [ "$PWD" != "$SUSE_CHANNELS" ] && { _different_folder="$PWD"; cd $SUSE_CHANNELS }
  echo "The ${@} package is supported in the following codestreams:"
  echo "Regular support"
  maintained_regular ${@} | sed "s/^/\t/g"
  echo "LTSS support"
  maintained_ltss ${@} | sed "s/^/\t/g"
  [ "$_different_folder" != false ] && cd $_different_folder
}; f'

alias git-find-file='f() {
                        if [[ -z $1 ]]; then echo "Usage: git find-file \"<pathname_regex>\""; return; fi

                        for branch in $(git branch | sed "s/^..//g" | tr "\n" " "); do
                          if git ls-tree -r --name-only $branch | grep "$1" > /dev/null; then
                            echo "${branch}:";
                            git ls-tree -r --name-only $branch | grep "$1" | sed "s/^/   /g";
                          fi
                        done; :
                      }; f'

# Search for packages in IBS and OBS
alias se='# Usage:
          #   se package_name (equal to isc se -s package_name; osc se -s package_name)
          #   se -o package_name (equal to isc se package_name; osc se package_name)
          # I chose an opt-out design for the -s flag because I want it enabled
          # by default since I use it 99% of the times
          #
          func2() { echo "$1" | grep -qE  "^#.*" && return
                echo "$1" | grep -qE  "No matches found for|matches for" && return
                echo "$1" | grep -qE  "^$" && return
                echo "$1" | grep -qE  "^home:" && return
                echo "$1" | grep -qE  "^PTF:" && return
                echo "$1" | grep -qE  "^SUSE:Maintenance:" && return
                echo "$1" | grep -qE  "^openSUSE:Maintenance:" && return
                echo "$1" | grep -qE  ".*[_\.\-]+[0-9]{2,}$" && return
                echo "$1" | grep -qE  "^SUSE:openSUSE:" && return
                echo "$1" | grep -qE  "^SUSE:SLE-9" && return
                echo "$1" | grep -qE  "^SUSE:SLE-10" && return
                echo "$1" | grep -qE  "^DISCONTINUED:" && return
                echo "$1" | grep -qE  "^openSUSE:1" && return
                echo "$1" | grep -qE  "^openSUSE:Leap:15.[0-2]." && return
                echo "$1" | grep -iqE "^Devel:" && return
                echo "$1" | grep -qE  "^YaST:" && return
                echo "$1" | grep -qE  "^openSUSE:Evergreen" && return
                echo "$1" | grep -qE  "^openSUSE:Leap:42" && return
                echo "$1" | grep -qE  "^QA:" && return
                echo "$1" | grep -qE  "^openSUSE:Dropped" && return
                echo "$1" | grep -qE  "^Maemo:" && return
                echo "$1" | grep -qE  "^OBS:" && return
                echo "$1" | grep -qE  "^SSL:" && return
                echo "$1" | grep -qE  "^Scented:" && return
                echo "  $1"
          };
          func1() {
            local _s="-s"
            if [[ "$1" == "-o" ]]; then
              _s=""
              shift
            fi
            echo "IBS:"
            isc se $_s "$1" | while read -r line; do func2 "$line"; done
            echo "OBS:"
            osc se $_s "$1" | while read -r line; do func2 "$line"; done
          }; func1'

alias im="PYENV_VERSION=imtools REQUESTS_CA_BUNDLE=~/.ca-certificates/SUSE/SUSE_Trust_Root.crt ~/Workspace/py-environment/imtools/im.py"
