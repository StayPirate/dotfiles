alias decompress='extract_phar_inplace() {
                      secbox --no-tty php -r \
                      "\$phar = new Phar(\"$1\"); \$phar->extractTo(\"$(dirname "$1")\");"
                  }

                  old_IFS=$IFS; IFS=''

                  # Extract data.tar.gz from gemfile which will be processed later on this script 
                  find . -type f -regextype posix-extended -regex ".*\.gem" |
                    awk -F ": " "/^[^#]/{print $1}" |
                    grep -v "\.osc" |
                      while read -r gemfile; do
                        echo $gemfile
                        tar --force-local -xf "$gemfile" -C $(dirname "$gemfile");
                      done

                  # Extract PHP Archive (.phar files)
                  find . -type f -regextype posix-extended -regex ".*\.phar" |
                    awk -F ": " "/^[^#]/{print $1}" |
                    grep -v "\.osc" |
                    while read -r pharfile; do
                      echo $pharfile
                      extract_phar_inplace "$pharfile"
                    done

                  # Extract obscpio archives (.obscpio files)
                  find . -type f -regextype posix-extended -regex ".*\.obscpio" |
                    awk -F ": " "/^[^#]/{print $1}" |
                    grep -v "\.osc" |
                    while read -r obsfile; do
                      echo $obsfile
                      cpio --quiet --extract --preserve-modification-time --make-directories --directory $(dirname "$obsfile") -- < "$obsfile"
                    done

                  # Extract any compressed archive in its same folder
                  find . -type f -regextype posix-extended -regex ".*\.(tar\.|tgz|zip).*" |
                    awk -F ": " "/^[^#]/{print $1}" |
                    # Skip .osc folder
                    grep -v "\.osc" |
                    # Skip similar-name non archive files
                    grep -Ev ".*\.(asc|sig|sha)$" |
                      while read -r line; do
                        echo $line
                        if echo $line | grep -qE ".*\.zip$"; then
                          unzip -q "$line" -d $(dirname "$line");
                        else
                          tar --force-local -xf "$line" -C $(dirname "$line");
                        fi
                      done

                  IFS=$old_IFS
                  unset gemfile line old_IFS'

# Enter the SUSE kernel repository
alias k="cd ~/Workspace/SUSE/kernel"
# Enter the SUSE kernel repository and update all the local branches
alias kk="cd ~/Workspace/SUSE/kernel && git reset-to-remote --all-local-branches"

alias git-find-commit='related_commits() {
                      # First result is the hash itself
                      git show "$1" --no-patch --no-notes --format=%h

                      # Then search any other commit which mentions the searched hash or subject in its message
                      subject=$(git show "$1" --no-patch --no-notes --format=%s)
                      # Sometimes when kernel matinarers move commits the commit message is wrapped by 50 chars
                      # hence I only search for a substring of the full subject, wrapped by space and by 50 width
                      subject_wrapped_50=$(echo $subject | fold -sw 50 | head -n 1 | rev | cut -c 2- | rev)
                      git log --all -F --grep="$1" --grep="$subject_wrapped_50" --format=%h
                    }
                   f() {
                     if [[ -z $1 ]]; then echo "Usage: git find-commit \"<commit_id>\""; return; fi

                     # Exit if the commit dont exists in any of the local branches.
                     git show "$1" >/dev/null || return

                     # Kernel maintainers only use the first 12 chars of the hash
                     short_hash=$(git show "$1" --no-patch --no-notes --format=%h)
                     related_commits $short_hash | sort -u | \
                       while read -r commit; do
                         git show "$commit" --oneline --no-patch --no-notes
                         git branch --contains "$commit" | sed "s/^..//g" | while read -r branch; do echo -e "\t${branch}"; done
                       done
                    }; f'

alias git-find-file='f() {
                        if [[ -z $1 ]]; then echo "Usage: git find-file \"<pathname_regex>\""; return; fi

                        for branch in $(git branch | sed "s/^..//g" | tr "\n" " "); do
                          if git ls-tree -r --name-only $branch | grep "$1" > /dev/null; then
                            echo "${branch}:";
                            git ls-tree -r --name-only $branch | grep "$1" | sed "s/^/   /g";
                          fi
                        done; :
                      }; f'

# Search for packages in IBS and OBS
alias se='# Usage:
          #   se package_name (equal to isc se -s package_name; osc se -s package_name)
          #   se -o package_name (equal to isc se package_name; osc se package_name)
          # I chose an opt-out design for the -s flag because I want it enabled
          # by default since I use it 99% of the times
          #
          g() { echo "$1" | grep -qE  "^#.*" && return
                echo "$1" | grep -qE  "No matches found for|matches for" && return
                echo "$1" | grep -qE  "^$" && return
                echo "$1" | grep -qE  "^home:" && return
                echo "$1" | grep -qE  "^PTF:" && return
                echo "$1" | grep -qE  "^SUSE:Maintenance:" && return
                echo "$1" | grep -qE  "^openSUSE:Maintenance:" && return
                echo "$1" | grep -qE  ".*[_\.\-]+[0-9]{2,}$" && return
                echo "$1" | grep -qE  "^SUSE:openSUSE:" && return
                echo "$1" | grep -qE  "^SUSE:SLE-9" && return
                echo "$1" | grep -qE  "^SUSE:SLE-10" && return
                echo "$1" | grep -qE  "^DISCONTINUED:" && return
                echo "$1" | grep -qE  "^openSUSE:1" && return
                echo "$1" | grep -qE  "^openSUSE:Leap:15.[0-2]." && return
                echo "$1" | grep -iqE "^Devel:" && return
                echo "$1" | grep -qE  "^YaST:" && return
                echo "$1" | grep -qE  "^openSUSE:Evergreen" && return
                echo "$1" | grep -qE  "^openSUSE:Leap:42" && return
                echo "$1" | grep -qE  "^QA:" && return
                echo "$1" | grep -qE  "^openSUSE:Dropped" && return
                echo "$1" | grep -qE  "^Maemo:" && return
                echo "$1" | grep -qE  "^OBS:" && return
                echo "$1" | grep -qE  "^SSL:" && return
                echo "$1" | grep -qE  "^Scented:" && return
                echo "  $1"
          };
          f() {
            local _s="-s"
            if [[ "$1" == "-o" ]]; then
              _s=""
              shift
            fi
            echo "IBS:"
            isc se $_s "$1" | while read -r line; do g "$line"; done
            echo "OBS:"
            osc se $_s "$1" | while read -r line; do g "$line"; done
          }; f'
