_container_name='suse-cmd'
_containerfile="${HOME}/.config/containers/containerfiles/${_container_name}"
_red='\033[0;31m'
_orange='\033[0;33m'
_green='\033[0;32m'
_no_color='\033[0m'

# Configure the container to start at boot
enable_container_service () {
    systemctl --user status container-${_container_name}.service >/dev/null 2>&1
    if [[ $? -ne 0 ]]; then
        podman generate systemd --name $_container_name > ${HOME}/.config/systemd/user/container-$_container_name.service
        [[ $? -ne 0 ]] && echo -e "${_orange}[*]${_no_color} Cannot create container-${_container_name}.service"
        #####
        # Workaround for bug: https://github.com/containers/podman/issues/8506#issuecomment-735442979
        # FIXME: To be removed once the fix end to the upstream
        sed -e '/^PID/s/^/#/' -i ${HOME}/.config/systemd/user/container-$_container_name.service
        #####
        systemctl --user daemon-reload
    fi

    systemctl --user is-enabled --quiet container-${_container_name}.service || systemctl --user enable container-${_container_name}.service > /dev/null 2>&1
    return $?
}

create_image () {
    # Check if VPN connection is available
    declare -a _required_domains=(
        "gitlab.suse.de"
        "download.suse.de"
    )
    for _domain in ${_required_domains[@]}; do
        nslookup $_domain > /dev/null 2>&1
        if [[ $? -ne 0 ]]; then
            echo -e "${_red}[!]${_no_color} ${_domain} cannot be resolved, please access the SUSE VPN first"
            return 1
        fi
    done

    [ -z $XDG_RUNTIME_DIR ] && XDG_RUNTIME_DIR=/tmp
    _tmp_log=$(mktemp -t suse-build-XXXX.log -p $XDG_RUNTIME_DIR)
    echo "[.] building ${_container_name} image from ${_containerfile}"
    echo -e "\tThis will take several minutes, you can check logs at ${_tmp_log}"
    podman build -t $_container_name\:local -f $_containerfile > $_tmp_log 2>&1
    if [[ $? -ne 0 ]]; then
        echo -e "${_red}[!]${_no_color} Cannot build the ${_container_name} image"
        return 1
    fi
    echo -e "${_green}[.] ${_no_color}building ${_container_name} image complete"
    return 0
}

update_image () {
    read "_reply?[.] An update is available, do you want to rebuild the image? [y/N] "
        if [[ "$_reply" =~ ^[Yy]$ ]]; then
            # Stop not updated running container
            podman container rm -f ${_container_name} > /dev/null 2>&1
            # Delete not update image
            podman image rm localhost/${_container_name}:local > /dev/null 2>&1
            if [[ $? -ne 0 ]]; then
                echo -e "${_orange}[*]${_no_color} Cannot delete ${_container_name} image, check if it is used by a running container."
                return 1
            fi
            create_image
            return $?
        else
            return 0
        fi
    return 1
}

create_container () {
    # Does the image exists?
    podman image ls | grep -qE "$_container_name.*local"
    if [[ $? -ne 0 ]]; then
        # If not, build it
        echo -e "${_orange}[*]${_no_color} ${_container_name} image not found"
        read "_reply?[.] Do you want to build the image right now? [y/N] "
        if [[ "$_reply" =~ ^[Yy]$ ]]; then
            create_image || return $?
        else
            return 1
        fi
    fi
    [[ -f $HOME/.config/systemd/user/container-$_container_name.service ]] && rm $HOME/.config/systemd/user/container-$_container_name.service
    [[ -d $HOME/SUSE/workdir ]] || mkdir -p $HOME/SUSE/workdir

    # Create this folder because I often use it with this command:

    # The mounted volume ${XDG_RUNTIME_DIR:-/tmp}:${XDG_RUNTIME_DIR:-/tmp}
    # is usefull for many purpose, most used ones (for me) are:
    #  - Access D-Bus session bus socket
    #    - Used by osc to access the secret service provider to get creds to log in OBS
    #  - mkcd (https://github.com/StayPirate/dotfiles/blob/7608e8ad66f8c13dc57fb49ed0ccf2dd7a04ae5a/.zshrc#L118)
    mkdir -p ${XDG_RUNTIME_DIR:-/tmp}/volatile >/dev/null 2>&1

    # Access the host D-Bus session-bus to retrieve osc creds via secret service API
    podman container create \
            --name $_container_name \
            -e DBUS_SESSION_BUS_ADDRESS="$DBUS_SESSION_BUS_ADDRESS" \
            -v ${XDG_RUNTIME_DIR:-/tmp}:${XDG_RUNTIME_DIR:-/tmp} \
            -v $HOME:$HOME \
            -w $HOME \
            -u $(id -u) --userns=keep-id \
            localhost/$_container_name\:local > /dev/null 2>&1
    [[ $? -ne 0 ]] && return $?
    enable_container_service
    return 0
}

start_container () {
    # Does the container exist?
    podman container exists $_container_name
    if [[ $? -ne 0 ]]; then
        # If not, create it
        echo -e "${_orange}[*]${_no_color} ${_container_name} container not found"
        create_container
        if [[ $? -ne 0 ]]; then
            echo -e "${_red}[!]${_no_color} Cannot create the ${_container_name} container"
            return 1
        fi
        echo -e "${_green}[.] ${_no_color}${_container_name} container created"
    fi

    systemctl --user is-active --quiet container-$_container_name.service >/dev/null 2>&1
    _service_status=$?
    case $_service_status in
    0) 
        return 0
        ;;
    3)
        # Service not active
        systemctl --user restart container-$_container_name.service >/dev/null 2>&1
        sleep 3
        systemctl --user is-active --quiet container-$_container_name.service >/dev/null 2>&1
        return $?
        ;;
    *)
        return 1
    esac
}

is_update_available () {
    _current_v=$(podman image inspect localhost/$_container_name\:local --format "{{.Config.Labels.version}}" 2>/dev/null)
    _latest_v=$(cat $HOME/.config/containers/containerfiles/suse-cmd | grep "LABEL version=" | cut -d "=" -f 2 | sed 's/"//g')
    if [[ "$_latest_v" =~ ^[0-9.]+$ && "$_current_v" =~ ^[0-9.]+$ ]]; then
        if [[ $_latest_v > $_current_v ]]; then
            return 0
        fi
    fi
    return 1
}

is_service_enabled () {
    systemctl --user is-enabled --quiet container-${_container_name}.service
    return $?
}

is_container_running () {
    podman container ls --all | grep -qE "Up.*${_container_name}"
    return $?
}

suse_exec () {
    # Is podman installed?
    type podman >/dev/null 2>&1
    if [[ $? -ne 0 ]]; then
        echo -e "${_red}[!]${_no_color} Container engine missing: podman is required"
        return 1
    fi

    is_update_available && update_image

    is_container_running || start_container
    if [[ $? -ne 0 ]]; then
        echo -e "${_red}[!]${_no_color} Cannot start the ${_container_name} container. Check:"
        echo -e "\tsystemctl --user status container-${_container_name}.service"
        echo -e "\tjournalctl --user -u container-${_container_name}.service -b"
        echo -e "\tpodman container logs ${_container_name}"
        return 1
    fi

    is_service_enabled || enable_container_service
    if [[ $? -ne 0 ]]; then
        echo -e "${_orange}[*]${_no_color} Cannot enable ${_container_name} service"
    fi

    podman container exec -w $(pwd) $_container_name "$@"
}

suse-cmd () {
    suse_exec "$@"
}