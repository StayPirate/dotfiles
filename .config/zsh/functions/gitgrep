### Incident Manager tooling
#
# These functions are used to quickly grep into different maintained kernel-sources in SUSE.
#
# To properly initialize a local kernel repo run the following commands:
#
#   git clone git://kerncvs.suse.de/kernel.git && cd kernel
#   git branch --track SLE15-SP2 origin/SLE15-SP2
#   git branch --track linux-2.6.32 origin/linux-2.6.32
#   git branch --track linux-3.0 origin/linux-3.0
#   git branch --track linux-4.4 origin/linux-4.4
#   git branch --track linux-4.12 origin/linux-4.12
#   git branch --track master origin/master
#   git branch --track stable origin/stable
#

gitgrep_usage () {
    cat <<EOF
Usage:
    gitgrep "<string to search for>" ["filename" ["grep extra options"]]

Examples:
    gitgrep "create notification to user" "/bcm\.c" "-C 4"
    gitgrep "create notification to user" "/bcm\.c"
    gitgrep "create notification to user" "" "-C 4"
    gitgrep "create notification to user" ""

Note:
    If you don't want to filter by filename, add "" as second argument, as shown in the examples above.
    Gitgrep hardcode some -always needed- grep options, which are: -Ihni

    To list all the file which match a specific pattern run:
      gitgrep "" "<regex>"
      Example: gitgrep "" "/bcm\.c"
    or simply use this alias:
      alias gitfind="gitgrep \"\""
EOF
}

gitfind () {
    # According to kerncvs.suse.de, currently maintained kernels are:
    local -ar kernels=(
        "SLE15-SP2"
        "linux-2.6.32"
        "linux-3.0"
        "linux-4.12"
        "linux-4.4"
        "master"
        "stable"
    )
    local branch found

    for branch in "${kernels[@]}"; do
        for found in `git ls-tree -r --name-only "${branch}" | grep "${1}"`; do
            echo "${branch}:${found}"
        done
    done
}

########################
##### gitgrep main #####

if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    echo "not a git repository"
    return
fi

if [[ $# -eq 0 ]]; then 
    gitgrep_usage
    return
fi

if [[ -z "$1" ]]; then 
    gitfind "${2}"
    return
fi

for file in `gitfind "${2}"`; do
    if git show "${file}" | grep -Ihni "${1}" ${3:-} >/dev/null 2>&1; then
        echo "$file:"
        git show "${file}" | grep -Ihni "${1}" ${3:-} | while read line; do echo -e "\t${line}"; done
    fi
done


########################
## output looks like: ##
########################
#
# > gitgrep "create notification to user" "/bcm\.c" "-C 4"
# SLE15-SP2:net/can/bcm.c:
#         391-
#         392-            op->count--;
#         393-            if (!op->count && (op->flags & TX_COUNTEVT)) {
#         394-
#         395:                    /* create notification to user */
#         396-                    msg_head.opcode  = TX_EXPIRED;
#         397-                    msg_head.flags   = op->flags;
#         398-                    msg_head.count   = op->count;
#         399-                    msg_head.ival1   = op->ival1;
#         --
#         552-{
#         553-    struct bcm_op *op = (struct bcm_op *)data;
#         554-    struct bcm_msg_head msg_head;
#         555-
#         556:    /* create notification to user */
#         557-    msg_head.opcode  = RX_TIMEOUT;
#         558-    msg_head.flags   = op->flags;
#         559-    msg_head.count   = op->count;
#         560-    msg_head.ival1   = op->ival1;
# linux-2.6.32:net/can/bcm.c:
#         351-
#         352-            op->count--;
#         353-            if (!op->count && (op->flags & TX_COUNTEVT)) {
#         354-
#         355:                    /* create notification to user */
#         356-                    msg_head.opcode  = TX_EXPIRED;
#         357-                    msg_head.flags   = op->flags;
#         358-                    msg_head.count   = op->count;
#         359-                    msg_head.ival1   = op->ival1;
#         --
#         523-{
#         524-    struct bcm_op *op = (struct bcm_op *)data;
#         525-    struct bcm_msg_head msg_head;
#         526-
#         527:    /* create notification to user */
#         528-    msg_head.opcode  = RX_TIMEOUT;
#         529-    msg_head.flags   = op->flags;
#         530-    msg_head.count   = op->count;
#         531-    msg_head.ival1   = op->ival1;
# [...]
